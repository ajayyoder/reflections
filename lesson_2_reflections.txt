What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, it has no commits. You must manually add the first commit. You need to
	initialize a repository because before you do so there is no .git file that stores the repository's info

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area keeps track of what files will be added to the next commit. That commit is added to the reposiory
	with git commit. The working directory is all of the files in the directory before they have been added to the stageing
	area.

How can you use the staging area to make sure you have one commit per logical change?

	You can check the differences between the staging area and the most recent commit by typing git diff --staged, so
	you can make sure that the changes you have made are what you what to be making. To reset all changes back to the last
	commit, type git reset --hard.

 What are some situations when branches would be helpful in keeping your history organized? How would branches help?

 	Branches allow you to store seperate versions of the programs without modifying the program. If you wanted to make an expiremental change, but still wanted access to and the ability to work on the program without the change, creating a new branch can be very helpful.

 How do the diagrams help you visualize the branch structure?

 	The diagrams show the master branch as well as all of the other braches and where they connect. Arrows are used inbetween commits
 	to designate parents. These diagrams make it easier to understand which commits are accesable from any branch and which branches 
 	have certain functions/changes.

 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

 	Git takes the information from the tip of both branches and merges the changes into one file. The result is the file with the changes from
 	both branches made. We represent this in the diagram with the new commit having two parents, the tips of the two unmerged brances because the
 	master branch now contains information from each.

 What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

 	Using Git's automatic merging is a lot faster than manual merging. It also automatically finds areas where there may be conflicts. A possible downside
 	is that Git may find many conflicts with simple logical solutions, which may be frustrating.
